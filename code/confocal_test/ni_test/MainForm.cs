/******************************************************************************
*
* Example program:
*   MultiFunctionSyncAIAO
*
* Category:
*   Synchronization
*
* Description:
*   This example demonstrates how to continuously acquire and generate
*   synchronized analog input and output, started by an external digital start
*   trigger.
*
* Instructions for running:
*   1.  Select the physical channels corresponding to where your signals are
*       input and output on the DAQ device.
*   2.  Enter the minimum and maximum voltage ranges.Note: For better accuracy
*       try to match the ranges to the expected voltage level of the measured or
*       generated signals.
*   3.  Set the number of samples to acquire per channel.
*   4.  Set the rate of the acquisition and generation.Note: The rate should be
*       at least twice as fast as the maximum frequency component of the signal
*       being acquired.
*   5.  Set the physical channel for the external digital trigger.  The default
*       is PFI0.
*   6.  Set the type, frequency, and amplitude of the wave to be generated.Note:
*       This example requires two DMA channels to run.  If your hardware does
*       not support two DMA channels, you need to set the
*       AOChannel.DataTransferMechanism property for the analog output task to
*       use interrupts.
*
* Steps:
*   1.  Create analog input and output voltage channels for measurement and
*       acquisition.
*   2.  Set timing parameters for continuous generation and acquisition.  The
*       sample rate and number of samples are set to the same values for each
*       task.
*   3.  Configure start triggers that will synchronize both tasks by triggering
*       the output task from the AI Start Trigger.
*   4.  Create the signal to be generated by the output task.
*   5.  Create an AnalogSingleChannelWriter and associate it with the output
*       task by using the task's stream.  Call
*       AnalogSingleChannelWriter.WriteMultiSample to write the data.
*   6.  Call Task.Start() on each task to start the acquisition and
*       generation.Note: The output task must start before the input task
*       because it is waiting on the input task for the start trigger.
*   7.  Create an AnalogSingleChannelReader and associate it with the input task
*       by using the task's stream. Call
*       AnalogSingleChannelReader.BeginReadMultiSample to install a callback and
*       begin the asynchronous read operation.
*   8.  Inside the callback, call AnalogSingleChannelReader.EndReadMultiSample
*       to retrieve the data from the read.
*   9.  Call AnalogSingleChannelReader.BeginReadMultiSample again inside the
*       callback to perform another read operation.
*   10. Dispose the Task object to clean-up any resources associated with the
*       task.
*   11. Handle any DaqExceptions, if they occur.
*
*   Note: This example sets SynchronizeCallback to true. If SynchronizeCallback
*   is set to false, then you must give special consideration to safely dispose
*   the task and to update the UI from the callback. If SynchronizeCallback is
*   set to false, the callback executes on the worker thread and not on the main
*   UI thread. You can only update a UI component on the thread on which it was
*   created. Refer to the How to: Safely Dispose Task When Using Asynchronous
*   Callbacks topic in the NI-DAQmx .NET help for more information.
*
* I/O Connections Overview:
*   Make sure your signal input terminals match the Physical Channel I/O
*   controls.
*
* Microsoft Windows Vista User Account Control
*   Running certain applications on Microsoft Windows Vista requires
*   administrator privileges, 
*   because the application name contains keywords such as setup, update, or
*   install. To avoid this problem, 
*   you must add an additional manifest to the application that specifies the
*   privileges required to run 
*   the application. Some Measurement Studio NI-DAQmx examples for Visual Studio
*   include these keywords. 
*   Therefore, all examples for Visual Studio are shipped with an additional
*   manifest file that you must 
*   embed in the example executable. The manifest file is named
*   [ExampleName].exe.manifest, where [ExampleName] 
*   is the NI-provided example name. For information on how to embed the manifest
*   file, refer to http://msdn2.microsoft.com/en-us/library/bb756929.aspx.Note: 
*   The manifest file is not provided with examples for Visual Studio .NET 2003.
*
******************************************************************************/

using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using NationalInstruments;
using NationalInstruments.DAQmx;

namespace NationalInstruments.Examples.MultiFunctionSyncAIAO
{
    /// <summary>
    /// Summary description for MainForm.
    /// </summary>
    public class MainForm : System.Windows.Forms.Form
    {
        private DataTable inputDataTable = null;
        private DataColumn[] inputDataColumns = null;
        private Task inputTask;
        private Task outputTask;
        private AnalogSingleChannelReader reader;
        private AnalogSingleChannelWriter writer;
        private AsyncCallback inputCallback;

        private double[] output;
        private Task runningTask;
        private System.Windows.Forms.GroupBox timingGroupBox;
        private System.Windows.Forms.NumericUpDown rateNumeric;
        private System.Windows.Forms.Label rateLabel;
        private System.Windows.Forms.Button startButton;
        private System.Windows.Forms.Button stopButton;
        private System.Windows.Forms.NumericUpDown amplitudeNumeric;
        private System.Windows.Forms.Label waveformTypeLabel;
        private System.Windows.Forms.Label amplitudeLabel;
        private System.Windows.Forms.GroupBox waveformGroupBox;
        private System.Windows.Forms.ComboBox waveformTypeComboBox;
        private System.Windows.Forms.Label triggerEdgeLabel;
        private System.Windows.Forms.ComboBox inputChannelComboBox;
        private System.Windows.Forms.NumericUpDown inputMinValNumeric;
        private System.Windows.Forms.Label inputChanLabel;
        private System.Windows.Forms.Label inputMaxValLabel;
        private System.Windows.Forms.Label inputMinValLabel;
        private System.Windows.Forms.NumericUpDown inputMaxValNumeric;
        private System.Windows.Forms.Label samplesLabel;
        private System.Windows.Forms.NumericUpDown samplesNumeric;
        private System.Windows.Forms.ComboBox outputChannelComboBox;
        private System.Windows.Forms.NumericUpDown outputMinValNumeric;
        private System.Windows.Forms.Label outputMaxValLabel;
        private System.Windows.Forms.Label outputMinValLabel;
        private System.Windows.Forms.NumericUpDown outputMaxValNumeric;
        private System.Windows.Forms.Label outputChanLabel;
        private System.Windows.Forms.GroupBox inputDataGroupBox;
        private System.Windows.Forms.DataGrid inputDataGrid;
        private System.Windows.Forms.ComboBox triggerEdgeComboBox;
        private System.Windows.Forms.GroupBox inputChanGroupBox;
        private System.Windows.Forms.GroupBox outputChanGroupBox;
        private System.Windows.Forms.GroupBox triggerGroupBox;
        private System.Windows.Forms.NumericUpDown frequencyNumeric;
        private System.Windows.Forms.Label frequencyLabel;
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.Container components = null;

        public MainForm()
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();

            // Initialize UI
            inputChannelComboBox.Items.AddRange(DaqSystem.Local.GetPhysicalChannels(PhysicalChannelTypes.AI, PhysicalChannelAccess.External));
            outputChannelComboBox.Items.AddRange(DaqSystem.Local.GetPhysicalChannels(PhysicalChannelTypes.AO, PhysicalChannelAccess.External));

            waveformTypeComboBox.SelectedIndex = 0;
            triggerEdgeComboBox.SelectedIndex = 0;

            // Set up the AI data tables
            inputDataTable = new DataTable();

            InitializeDataTables(25); 
            inputDataGrid.DataSource = inputDataTable;
        }

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if (components != null) 
                {
                    components.Dispose();
                }
                if (inputTask != null)
                {
                    runningTask = null;
                    inputTask.Dispose();
                }
                if (outputTask != null)
                {
                    outputTask.Dispose();
                }
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
            this.inputChanGroupBox = new System.Windows.Forms.GroupBox();
            this.inputChannelComboBox = new System.Windows.Forms.ComboBox();
            this.inputMinValNumeric = new System.Windows.Forms.NumericUpDown();
            this.inputChanLabel = new System.Windows.Forms.Label();
            this.inputMaxValLabel = new System.Windows.Forms.Label();
            this.inputMinValLabel = new System.Windows.Forms.Label();
            this.inputMaxValNumeric = new System.Windows.Forms.NumericUpDown();
            this.timingGroupBox = new System.Windows.Forms.GroupBox();
            this.rateNumeric = new System.Windows.Forms.NumericUpDown();
            this.samplesLabel = new System.Windows.Forms.Label();
            this.rateLabel = new System.Windows.Forms.Label();
            this.samplesNumeric = new System.Windows.Forms.NumericUpDown();
            this.frequencyNumeric = new System.Windows.Forms.NumericUpDown();
            this.frequencyLabel = new System.Windows.Forms.Label();
            this.startButton = new System.Windows.Forms.Button();
            this.outputChanGroupBox = new System.Windows.Forms.GroupBox();
            this.outputChannelComboBox = new System.Windows.Forms.ComboBox();
            this.outputMinValNumeric = new System.Windows.Forms.NumericUpDown();
            this.outputMaxValLabel = new System.Windows.Forms.Label();
            this.outputMinValLabel = new System.Windows.Forms.Label();
            this.outputMaxValNumeric = new System.Windows.Forms.NumericUpDown();
            this.outputChanLabel = new System.Windows.Forms.Label();
            this.stopButton = new System.Windows.Forms.Button();
            this.waveformGroupBox = new System.Windows.Forms.GroupBox();
            this.waveformTypeComboBox = new System.Windows.Forms.ComboBox();
            this.amplitudeNumeric = new System.Windows.Forms.NumericUpDown();
            this.waveformTypeLabel = new System.Windows.Forms.Label();
            this.amplitudeLabel = new System.Windows.Forms.Label();
            this.inputDataGroupBox = new System.Windows.Forms.GroupBox();
            this.inputDataGrid = new System.Windows.Forms.DataGrid();
            this.triggerEdgeLabel = new System.Windows.Forms.Label();
            this.triggerEdgeComboBox = new System.Windows.Forms.ComboBox();
            this.triggerGroupBox = new System.Windows.Forms.GroupBox();
            this.inputChanGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.inputMinValNumeric)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.inputMaxValNumeric)).BeginInit();
            this.timingGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.rateNumeric)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.samplesNumeric)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.frequencyNumeric)).BeginInit();
            this.outputChanGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.outputMinValNumeric)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.outputMaxValNumeric)).BeginInit();
            this.waveformGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.amplitudeNumeric)).BeginInit();
            this.inputDataGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.inputDataGrid)).BeginInit();
            this.triggerGroupBox.SuspendLayout();
            this.SuspendLayout();
            // 
            // inputChanGroupBox
            // 
            this.inputChanGroupBox.Controls.Add(this.inputChannelComboBox);
            this.inputChanGroupBox.Controls.Add(this.inputMinValNumeric);
            this.inputChanGroupBox.Controls.Add(this.inputChanLabel);
            this.inputChanGroupBox.Controls.Add(this.inputMaxValLabel);
            this.inputChanGroupBox.Controls.Add(this.inputMinValLabel);
            this.inputChanGroupBox.Controls.Add(this.inputMaxValNumeric);
            this.inputChanGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputChanGroupBox.Location = new System.Drawing.Point(13, 11);
            this.inputChanGroupBox.Name = "inputChanGroupBox";
            this.inputChanGroupBox.Size = new System.Drawing.Size(525, 155);
            this.inputChanGroupBox.TabIndex = 0;
            this.inputChanGroupBox.TabStop = false;
            this.inputChanGroupBox.Text = "Channel Parameters - Input";
            // 
            // inputChannelComboBox
            // 
            this.inputChannelComboBox.Location = new System.Drawing.Point(243, 33);
            this.inputChannelComboBox.Name = "inputChannelComboBox";
            this.inputChannelComboBox.Size = new System.Drawing.Size(269, 23);
            this.inputChannelComboBox.TabIndex = 1;
            this.inputChannelComboBox.Text = "Dev1/ai0";
            // 
            // inputMinValNumeric
            // 
            this.inputMinValNumeric.DecimalPlaces = 2;
            this.inputMinValNumeric.Location = new System.Drawing.Point(243, 111);
            this.inputMinValNumeric.Minimum = new decimal(new int[] {
            100,
            0,
            0,
            -2147483648});
            this.inputMinValNumeric.Name = "inputMinValNumeric";
            this.inputMinValNumeric.Size = new System.Drawing.Size(269, 25);
            this.inputMinValNumeric.TabIndex = 5;
            this.inputMinValNumeric.Value = new decimal(new int[] {
            10,
            0,
            0,
            -2147483648});
            // 
            // inputChanLabel
            // 
            this.inputChanLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputChanLabel.Location = new System.Drawing.Point(26, 36);
            this.inputChanLabel.Name = "inputChanLabel";
            this.inputChanLabel.Size = new System.Drawing.Size(153, 22);
            this.inputChanLabel.TabIndex = 0;
            this.inputChanLabel.Text = "Input Channel:";
            // 
            // inputMaxValLabel
            // 
            this.inputMaxValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputMaxValLabel.Location = new System.Drawing.Point(26, 75);
            this.inputMaxValLabel.Name = "inputMaxValLabel";
            this.inputMaxValLabel.Size = new System.Drawing.Size(153, 22);
            this.inputMaxValLabel.TabIndex = 2;
            this.inputMaxValLabel.Text = "Maximum Value:";
            // 
            // inputMinValLabel
            // 
            this.inputMinValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputMinValLabel.Location = new System.Drawing.Point(26, 114);
            this.inputMinValLabel.Name = "inputMinValLabel";
            this.inputMinValLabel.Size = new System.Drawing.Size(153, 22);
            this.inputMinValLabel.TabIndex = 4;
            this.inputMinValLabel.Text = "Minimum Value:";
            // 
            // inputMaxValNumeric
            // 
            this.inputMaxValNumeric.DecimalPlaces = 2;
            this.inputMaxValNumeric.Location = new System.Drawing.Point(243, 72);
            this.inputMaxValNumeric.Name = "inputMaxValNumeric";
            this.inputMaxValNumeric.Size = new System.Drawing.Size(269, 25);
            this.inputMaxValNumeric.TabIndex = 3;
            this.inputMaxValNumeric.Value = new decimal(new int[] {
            10,
            0,
            0,
            0});
            // 
            // timingGroupBox
            // 
            this.timingGroupBox.Controls.Add(this.rateNumeric);
            this.timingGroupBox.Controls.Add(this.samplesLabel);
            this.timingGroupBox.Controls.Add(this.rateLabel);
            this.timingGroupBox.Controls.Add(this.samplesNumeric);
            this.timingGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.timingGroupBox.Location = new System.Drawing.Point(13, 343);
            this.timingGroupBox.Name = "timingGroupBox";
            this.timingGroupBox.Size = new System.Drawing.Size(525, 122);
            this.timingGroupBox.TabIndex = 2;
            this.timingGroupBox.TabStop = false;
            this.timingGroupBox.Text = "Timing Parameters";
            // 
            // rateNumeric
            // 
            this.rateNumeric.DecimalPlaces = 2;
            this.rateNumeric.Location = new System.Drawing.Point(243, 33);
            this.rateNumeric.Maximum = new decimal(new int[] {
            102400,
            0,
            0,
            0});
            this.rateNumeric.Name = "rateNumeric";
            this.rateNumeric.Size = new System.Drawing.Size(269, 25);
            this.rateNumeric.TabIndex = 1;
            this.rateNumeric.Value = new decimal(new int[] {
            25,
            0,
            0,
            0});
            // 
            // samplesLabel
            // 
            this.samplesLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.samplesLabel.Location = new System.Drawing.Point(26, 75);
            this.samplesLabel.Name = "samplesLabel";
            this.samplesLabel.Size = new System.Drawing.Size(192, 22);
            this.samplesLabel.TabIndex = 2;
            this.samplesLabel.Text = "Samples:";
            // 
            // rateLabel
            // 
            this.rateLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.rateLabel.Location = new System.Drawing.Point(26, 36);
            this.rateLabel.Name = "rateLabel";
            this.rateLabel.Size = new System.Drawing.Size(153, 22);
            this.rateLabel.TabIndex = 0;
            this.rateLabel.Text = "Sample Rate (Hz):";
            // 
            // samplesNumeric
            // 
            this.samplesNumeric.Location = new System.Drawing.Point(243, 72);
            this.samplesNumeric.Maximum = new decimal(new int[] {
            1000,
            0,
            0,
            0});
            this.samplesNumeric.Name = "samplesNumeric";
            this.samplesNumeric.Size = new System.Drawing.Size(269, 25);
            this.samplesNumeric.TabIndex = 3;
            this.samplesNumeric.Value = new decimal(new int[] {
            25,
            0,
            0,
            0});
            // 
            // frequencyNumeric
            // 
            this.frequencyNumeric.DecimalPlaces = 2;
            this.frequencyNumeric.Location = new System.Drawing.Point(243, 72);
            this.frequencyNumeric.Maximum = new decimal(new int[] {
            102400,
            0,
            0,
            0});
            this.frequencyNumeric.Name = "frequencyNumeric";
            this.frequencyNumeric.Size = new System.Drawing.Size(269, 25);
            this.frequencyNumeric.TabIndex = 3;
            this.frequencyNumeric.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // frequencyLabel
            // 
            this.frequencyLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.frequencyLabel.Location = new System.Drawing.Point(26, 75);
            this.frequencyLabel.Name = "frequencyLabel";
            this.frequencyLabel.Size = new System.Drawing.Size(192, 22);
            this.frequencyLabel.TabIndex = 2;
            this.frequencyLabel.Text = "Frequency  (Hz):";
            // 
            // startButton
            // 
            this.startButton.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.startButton.Location = new System.Drawing.Point(589, 688);
            this.startButton.Name = "startButton";
            this.startButton.Size = new System.Drawing.Size(120, 32);
            this.startButton.TabIndex = 6;
            this.startButton.Text = "Start";
            this.startButton.Click += new System.EventHandler(this.startButton_Click);
            // 
            // outputChanGroupBox
            // 
            this.outputChanGroupBox.Controls.Add(this.outputChannelComboBox);
            this.outputChanGroupBox.Controls.Add(this.outputMinValNumeric);
            this.outputChanGroupBox.Controls.Add(this.outputMaxValLabel);
            this.outputChanGroupBox.Controls.Add(this.outputMinValLabel);
            this.outputChanGroupBox.Controls.Add(this.outputMaxValNumeric);
            this.outputChanGroupBox.Controls.Add(this.outputChanLabel);
            this.outputChanGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputChanGroupBox.Location = new System.Drawing.Point(13, 177);
            this.outputChanGroupBox.Name = "outputChanGroupBox";
            this.outputChanGroupBox.Size = new System.Drawing.Size(525, 155);
            this.outputChanGroupBox.TabIndex = 1;
            this.outputChanGroupBox.TabStop = false;
            this.outputChanGroupBox.Text = "Channel Parameters - Output";
            // 
            // outputChannelComboBox
            // 
            this.outputChannelComboBox.Location = new System.Drawing.Point(243, 33);
            this.outputChannelComboBox.Name = "outputChannelComboBox";
            this.outputChannelComboBox.Size = new System.Drawing.Size(269, 23);
            this.outputChannelComboBox.TabIndex = 1;
            this.outputChannelComboBox.Text = "Dev1/ao0";
            // 
            // outputMinValNumeric
            // 
            this.outputMinValNumeric.DecimalPlaces = 2;
            this.outputMinValNumeric.Location = new System.Drawing.Point(243, 111);
            this.outputMinValNumeric.Minimum = new decimal(new int[] {
            100,
            0,
            0,
            -2147483648});
            this.outputMinValNumeric.Name = "outputMinValNumeric";
            this.outputMinValNumeric.Size = new System.Drawing.Size(269, 25);
            this.outputMinValNumeric.TabIndex = 5;
            this.outputMinValNumeric.Value = new decimal(new int[] {
            10,
            0,
            0,
            -2147483648});
            // 
            // outputMaxValLabel
            // 
            this.outputMaxValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputMaxValLabel.Location = new System.Drawing.Point(26, 75);
            this.outputMaxValLabel.Name = "outputMaxValLabel";
            this.outputMaxValLabel.Size = new System.Drawing.Size(153, 22);
            this.outputMaxValLabel.TabIndex = 2;
            this.outputMaxValLabel.Text = "Maximum Value:";
            // 
            // outputMinValLabel
            // 
            this.outputMinValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputMinValLabel.Location = new System.Drawing.Point(26, 114);
            this.outputMinValLabel.Name = "outputMinValLabel";
            this.outputMinValLabel.Size = new System.Drawing.Size(153, 22);
            this.outputMinValLabel.TabIndex = 4;
            this.outputMinValLabel.Text = "Minimum Value:";
            // 
            // outputMaxValNumeric
            // 
            this.outputMaxValNumeric.DecimalPlaces = 2;
            this.outputMaxValNumeric.Location = new System.Drawing.Point(243, 72);
            this.outputMaxValNumeric.Name = "outputMaxValNumeric";
            this.outputMaxValNumeric.Size = new System.Drawing.Size(269, 25);
            this.outputMaxValNumeric.TabIndex = 3;
            this.outputMaxValNumeric.Value = new decimal(new int[] {
            10,
            0,
            0,
            0});
            // 
            // outputChanLabel
            // 
            this.outputChanLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputChanLabel.Location = new System.Drawing.Point(26, 36);
            this.outputChanLabel.Name = "outputChanLabel";
            this.outputChanLabel.Size = new System.Drawing.Size(153, 22);
            this.outputChanLabel.TabIndex = 0;
            this.outputChanLabel.Text = "Output Channel:";
            // 
            // stopButton
            // 
            this.stopButton.Enabled = false;
            this.stopButton.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.stopButton.Location = new System.Drawing.Point(781, 688);
            this.stopButton.Name = "stopButton";
            this.stopButton.Size = new System.Drawing.Size(120, 32);
            this.stopButton.TabIndex = 7;
            this.stopButton.Text = "Stop";
            this.stopButton.Click += new System.EventHandler(this.stopButton_Click);
            // 
            // waveformGroupBox
            // 
            this.waveformGroupBox.Controls.Add(this.waveformTypeComboBox);
            this.waveformGroupBox.Controls.Add(this.amplitudeNumeric);
            this.waveformGroupBox.Controls.Add(this.waveformTypeLabel);
            this.waveformGroupBox.Controls.Add(this.amplitudeLabel);
            this.waveformGroupBox.Controls.Add(this.frequencyNumeric);
            this.waveformGroupBox.Controls.Add(this.frequencyLabel);
            this.waveformGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.waveformGroupBox.Location = new System.Drawing.Point(13, 565);
            this.waveformGroupBox.Name = "waveformGroupBox";
            this.waveformGroupBox.Size = new System.Drawing.Size(525, 155);
            this.waveformGroupBox.TabIndex = 4;
            this.waveformGroupBox.TabStop = false;
            this.waveformGroupBox.Text = "Waveform Parameters";
            // 
            // waveformTypeComboBox
            // 
            this.waveformTypeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.waveformTypeComboBox.Items.AddRange(new object[] {
            "Sine"});
            this.waveformTypeComboBox.Location = new System.Drawing.Point(243, 33);
            this.waveformTypeComboBox.Name = "waveformTypeComboBox";
            this.waveformTypeComboBox.Size = new System.Drawing.Size(269, 23);
            this.waveformTypeComboBox.TabIndex = 1;
            // 
            // amplitudeNumeric
            // 
            this.amplitudeNumeric.DecimalPlaces = 3;
            this.amplitudeNumeric.Location = new System.Drawing.Point(243, 111);
            this.amplitudeNumeric.Maximum = new decimal(new int[] {
            102400,
            0,
            0,
            0});
            this.amplitudeNumeric.Name = "amplitudeNumeric";
            this.amplitudeNumeric.Size = new System.Drawing.Size(269, 25);
            this.amplitudeNumeric.TabIndex = 5;
            this.amplitudeNumeric.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            // 
            // waveformTypeLabel
            // 
            this.waveformTypeLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.waveformTypeLabel.Location = new System.Drawing.Point(26, 36);
            this.waveformTypeLabel.Name = "waveformTypeLabel";
            this.waveformTypeLabel.Size = new System.Drawing.Size(153, 22);
            this.waveformTypeLabel.TabIndex = 0;
            this.waveformTypeLabel.Text = "Waveform Type:";
            // 
            // amplitudeLabel
            // 
            this.amplitudeLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.amplitudeLabel.Location = new System.Drawing.Point(26, 114);
            this.amplitudeLabel.Name = "amplitudeLabel";
            this.amplitudeLabel.Size = new System.Drawing.Size(153, 22);
            this.amplitudeLabel.TabIndex = 4;
            this.amplitudeLabel.Text = "Amplitude:";
            // 
            // inputDataGroupBox
            // 
            this.inputDataGroupBox.Controls.Add(this.inputDataGrid);
            this.inputDataGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputDataGroupBox.Location = new System.Drawing.Point(550, 11);
            this.inputDataGroupBox.Name = "inputDataGroupBox";
            this.inputDataGroupBox.Size = new System.Drawing.Size(407, 669);
            this.inputDataGroupBox.TabIndex = 5;
            this.inputDataGroupBox.TabStop = false;
            this.inputDataGroupBox.Text = "Input Data";
            // 
            // inputDataGrid
            // 
            this.inputDataGrid.AllowSorting = false;
            this.inputDataGrid.DataMember = "";
            this.inputDataGrid.HeaderForeColor = System.Drawing.SystemColors.ControlText;
            this.inputDataGrid.Location = new System.Drawing.Point(5, 22);
            this.inputDataGrid.Name = "inputDataGrid";
            this.inputDataGrid.PreferredColumnWidth = 150;
            this.inputDataGrid.ReadOnly = true;
            this.inputDataGrid.Size = new System.Drawing.Size(392, 638);
            this.inputDataGrid.TabIndex = 0;
            this.inputDataGrid.TabStop = false;
            // 
            // triggerEdgeLabel
            // 
            this.triggerEdgeLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.triggerEdgeLabel.Location = new System.Drawing.Point(24, 30);
            this.triggerEdgeLabel.Name = "triggerEdgeLabel";
            this.triggerEdgeLabel.Size = new System.Drawing.Size(155, 23);
            this.triggerEdgeLabel.TabIndex = 2;
            this.triggerEdgeLabel.Text = "Trigger Edge:";
            // 
            // triggerEdgeComboBox
            // 
            this.triggerEdgeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.triggerEdgeComboBox.Items.AddRange(new object[] {
            "Rising",
            "Falling"});
            this.triggerEdgeComboBox.Location = new System.Drawing.Point(243, 28);
            this.triggerEdgeComboBox.Name = "triggerEdgeComboBox";
            this.triggerEdgeComboBox.Size = new System.Drawing.Size(269, 23);
            this.triggerEdgeComboBox.TabIndex = 3;
            // 
            // triggerGroupBox
            // 
            this.triggerGroupBox.Controls.Add(this.triggerEdgeLabel);
            this.triggerGroupBox.Controls.Add(this.triggerEdgeComboBox);
            this.triggerGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.triggerGroupBox.Location = new System.Drawing.Point(13, 476);
            this.triggerGroupBox.Name = "triggerGroupBox";
            this.triggerGroupBox.Size = new System.Drawing.Size(525, 70);
            this.triggerGroupBox.TabIndex = 3;
            this.triggerGroupBox.TabStop = false;
            this.triggerGroupBox.Text = "Trigger Parameters";
            // 
            // MainForm
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(8, 18);
            this.ClientSize = new System.Drawing.Size(981, 729);
            this.Controls.Add(this.inputDataGroupBox);
            this.Controls.Add(this.startButton);
            this.Controls.Add(this.inputChanGroupBox);
            this.Controls.Add(this.timingGroupBox);
            this.Controls.Add(this.outputChanGroupBox);
            this.Controls.Add(this.stopButton);
            this.Controls.Add(this.waveformGroupBox);
            this.Controls.Add(this.triggerGroupBox);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.Name = "MainForm";
            this.Text = "MultiFunction Sync - AI and AO - External Start Trigger";
            this.inputChanGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.inputMinValNumeric)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.inputMaxValNumeric)).EndInit();
            this.timingGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.rateNumeric)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.samplesNumeric)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.frequencyNumeric)).EndInit();
            this.outputChanGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.outputMinValNumeric)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.outputMaxValNumeric)).EndInit();
            this.waveformGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.amplitudeNumeric)).EndInit();
            this.inputDataGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.inputDataGrid)).EndInit();
            this.triggerGroupBox.ResumeLayout(false);
            this.ResumeLayout(false);

        }
        #endregion

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main() 
        {
            Application.EnableVisualStyles();
            Application.DoEvents();
            Application.Run(new MainForm());
        }

        private void ConfigNumeric(NumericUpDown numeric, decimal minVal)
        {
            numeric.Minimum = minVal;
            numeric.Maximum = Decimal.MaxValue;
        }

        private void ConfigNumeric(NumericUpDown numeric)
        {
            ConfigNumeric(numeric, Decimal.MinValue);
        }

        private void InitializeDataTables(int rows)
        {
            // Clear out the data
            inputDataTable.Rows.Clear();

            inputDataTable.Columns.Clear();

            // Add one column to each DataGrid of type double
            inputDataColumns = new DataColumn[1];

            inputDataColumns[0] = new DataColumn();
            inputDataColumns[0].DataType = typeof(double);
            inputDataColumns[0].ColumnName = "Input Data";

            inputDataTable.Columns.AddRange(inputDataColumns);

            // Now add a certain number of rows
            for(int i = 0; i < rows; i++)             
            {
                object[] rowArr = new object[1];
                inputDataTable.Rows.Add(rowArr);
            }
        }

        private void startButton_Click(object sender, System.EventArgs e)
        {
            // Change the mouse to an hourglass for the duration of this function.
            Cursor.Current = Cursors.WaitCursor;

            // Read UI selections
            DigitalEdgeStartTriggerEdge triggerEdge;
            if (this.triggerEdgeComboBox.Text == "Rising")
                triggerEdge = DigitalEdgeStartTriggerEdge.Rising;
            else
                triggerEdge = DigitalEdgeStartTriggerEdge.Falling;

            try
            {
                // Create the master and slave tasks
                inputTask = new Task("inputTask");
                outputTask = new Task("outputTask");

                // Configure both tasks with the values selected on the UI.
                inputTask.AIChannels.CreateVoltageChannel(inputChannelComboBox.Text,
                    "",
                    AITerminalConfiguration.Differential,
                    Convert.ToDouble(inputMinValNumeric.Value),
                    Convert.ToDouble(inputMaxValNumeric.Value),
                    AIVoltageUnits.Volts);

                outputTask.AOChannels.CreateVoltageChannel(outputChannelComboBox.Text,
                    "",
                    Convert.ToDouble(outputMinValNumeric.Value),
                    Convert.ToDouble(outputMaxValNumeric.Value),
                    AOVoltageUnits.Volts);

                // Set up the timing
                inputTask.Timing.ConfigureSampleClock("",
                    Convert.ToDouble(rateNumeric.Value),
                    SampleClockActiveEdge.Rising,
                    SampleQuantityMode.ContinuousSamples,
                    Convert.ToInt32(samplesNumeric.Value));

                outputTask.Timing.ConfigureSampleClock("",
                    Convert.ToDouble(rateNumeric.Value),
                    SampleClockActiveEdge.Rising,
                    SampleQuantityMode.ContinuousSamples,
                    Convert.ToInt32(samplesNumeric.Value));

                // Set up the start trigger
                
                string deviceName = inputChannelComboBox.Text.Split('/')[0];
                string terminalNameBase = "/" + GetDeviceName(deviceName) + "/";
                outputTask.Triggers.StartTrigger.ConfigureDigitalEdgeTrigger(terminalNameBase + "ai/StartTrigger",
                    triggerEdge);

                // Verify the tasks
                inputTask.Control(TaskAction.Verify);
                outputTask.Control(TaskAction.Verify);

                // Write data to each output channel
                FunctionGenerator fGen = new FunctionGenerator(Convert.ToString(frequencyNumeric.Value),
                    Convert.ToString(samplesNumeric.Value),
                    Convert.ToString(frequencyNumeric.Value / (rateNumeric.Value / samplesNumeric.Value)),
                    waveformTypeComboBox.Text, 
                    amplitudeNumeric.Value.ToString());

                output = fGen.Data;

                writer = new AnalogSingleChannelWriter(outputTask.Stream);
                writer.WriteMultiSample(false, output);

                // Officially start the task
                StartTask();

                outputTask.Start();
                inputTask.Start();

                // Start reading as well
                inputCallback = new AsyncCallback(InputRead);
                reader = new AnalogSingleChannelReader(inputTask.Stream);

                // Use SynchronizeCallbacks to specify that the object 
                // marshals callbacks across threads appropriately.
                reader.SynchronizeCallbacks = true;
                
                reader.BeginReadMultiSample(Convert.ToInt32(samplesNumeric.Value), inputCallback, inputTask);
            }
            catch (Exception ex)
            {
                StopTask();
                MessageBox.Show(ex.Message);
            }
        }

        private void InputRead(IAsyncResult ar)
        {
            try
            {
                if (runningTask != null && runningTask == ar.AsyncState)
                {
                    // Read the data
                    double[] data = reader.EndReadMultiSample(ar);

                    // Display the data
                    for (int i = 0; i < inputDataTable.Rows.Count && i < data.Length; i++)
                    {
                        inputDataTable.Rows[i][0] = data[i];
                    }
                    for (int i = data.Length; i < inputDataTable.Rows.Count; i++)
                    {
                        inputDataTable.Rows[i][0] = DBNull.Value;
                    }

                    // Set up next callback
                    reader.BeginReadMultiSample(Convert.ToInt32(samplesNumeric.Value), inputCallback, inputTask);
                }
            }
            catch (Exception ex)
            {
                StopTask();
                MessageBox.Show(ex.Message);
            }
        }

        private void stopButton_Click(object sender, System.EventArgs e)
        {
            StopTask();
        }

        private void StartTask()
        {
            if (runningTask == null)
            {
                // Change state
                runningTask = inputTask;

                // Fix UI
                inputChannelComboBox.Enabled = false;
                inputMinValNumeric.Enabled = false;
                inputMaxValNumeric.Enabled = false;
            
                outputChannelComboBox.Enabled = false;
                outputChannelComboBox.Enabled = false;
                outputChannelComboBox.Enabled = false;
                outputMaxValNumeric.Enabled = false;
                outputMinValNumeric.Enabled = false;

                rateNumeric.Enabled = false;
                frequencyNumeric.Enabled = false;
                samplesNumeric.Enabled = false;
            
                waveformTypeComboBox.Enabled = false;
                amplitudeNumeric.Enabled = false;
                triggerEdgeComboBox.Enabled = false;

                startButton.Enabled = false;
                stopButton.Enabled = true;
            }
        }

        private void StopTask()
        {
            // Change state
            runningTask = null;

            // Fix UI
            inputChannelComboBox.Enabled = true;
            inputMinValNumeric.Enabled = true;
            inputMaxValNumeric.Enabled = true;
            
            outputChannelComboBox.Enabled = true;
            outputChannelComboBox.Enabled = true;
            outputChannelComboBox.Enabled = true;
            outputMaxValNumeric.Enabled = true;
            outputMinValNumeric.Enabled = true;

            rateNumeric.Enabled = true;
            frequencyNumeric.Enabled = true;
            samplesNumeric.Enabled = true;
            
            waveformTypeComboBox.Enabled = true;
            amplitudeNumeric.Enabled = true;
            triggerEdgeComboBox.Enabled = true;

            startButton.Enabled = true;
            stopButton.Enabled = false;
        
            // Stop tasks
            inputTask.Stop();
            outputTask.Stop();

            inputTask.Dispose();
            outputTask.Dispose();
        }

        public static string GetDeviceName(string deviceName)
        {
            Device device = DaqSystem.Local.LoadDevice(deviceName);
            if (device.BusType != DeviceBusType.CompactDaq)
                return deviceName;
            else
                return device.CompactDaqChassisDeviceName;
        }
    }
}
